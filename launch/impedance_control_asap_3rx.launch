<?xml version="1.0"?>

<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/>
  <arg name="verbose" default="false"/>

  <arg name="mount_velodyne" default="false"/>
  <arg name="mount_stereo_cam" default="false"/>

  <arg name="model_type" default="uav" />

  <arg name="name" default="uav" />
  <arg name="x" default="2.0" />
  <arg name="y" default="2.0" />
  <arg name="z" default="0.0" />

  <arg name="manipulator_type" default="wp_manipulator_3rx" />
  <arg name="manipulator_tool" default="rod" />
  <arg name="start_gazebo" default="true" />
  <arg name="mount_magnet" default="false" />
  <arg name="mount_magnet_with_disk" default="false" />
  <arg name="magnet_dipole_moment_z" default="1" />
  <arg name="turn_off_all_collisions" default="false" />
  <arg name="collision_bitmask" default="-1" />

  <arg name="uav_x" default="2"/>
  <arg name="uav_y" default="2"/>

  <arg name="enable_logging" default="true"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="uav"/>

  <arg name="aerial_manipulator_control_rate" default="100"/>
  <arg name="aerial_manipulator_control_params_file" default="/config/aerial_manipulator_parameters_3rx.yaml"/>

  <node name="sor_pgs_w" pkg="dynamic_reconfigure" type="dynparam" args="set gazebo sor_pgs_w 1.0"/>

  <!-- Launch gazebo -->
  <group if="$(arg start_gazebo)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="world_name" value="$(arg world_name)"/>
    </include>
  </group>

  <include file="$(find mmuav_description)/launch/spawn_uav.launch">
      <arg name="model_type" value="$(arg model_type)" />
      <arg name="name" value="$(arg name)" />
      <arg name="x" value="$(arg x)" />
      <arg name="y" value="$(arg y)" />
      <arg name="z" value="$(arg z)" />
      <arg name="manipulator_type" value="$(arg manipulator_type)" />
      <arg name="manipulator_tool" value="$(arg manipulator_tool)" />
      <arg name="mount_magnet" value="$(arg mount_magnet)" />
      <arg name="mount_magnet_with_disk" value="$(arg mount_magnet_with_disk)" />
      <arg name="magnet_dipole_moment_z" value="$(arg magnet_dipole_moment_z)" />
      <arg name="mount_velodyne" value="$(arg mount_velodyne)" />
      <arg name="mount_stereo_cam" value="$(arg mount_stereo_cam)" />
      <arg name="turn_off_all_collisions" default="$(arg turn_off_all_collisions)" />
      <arg name="collision_bitmask" default="$(arg collision_bitmask)" />
  </include> 

  <!-- Start attitude height control -->
  <include file="$(find mmuav_control)/launch/rotors_variation_attitude_position_control.launch">
        <arg name="namespace" value="$(arg name)" />
        <arg name="x" value="$(arg x)" />
        <arg name="y" value="$(arg y)" />
        <arg name="z" value="$(arg z)" />
        <arg name="run_trajectory_node" value="$(eval 'none' == manipulator_type)" />
  </include>

  <group if="$(eval 'wp_manipulator_3rx' == manipulator_type)">
    <include file="$(find aerial_manipulators_control)/launch/wp_manipulator_3rx_gazebo_control.launch">
        <arg name="namespace" value="$(arg name)" />
        <arg name="velocity_control_file" default="$(find mmuav_control)/config/wp_manipulator_3rx_velocity_control.yaml"/>
    </include>
  </group>

  <group ns="$(arg name)">
    <node name="aerial_manipulator_control" pkg="aerial_manipulators_control" type="aerial_manipulator_control" output="screen">
      <remap from="aerial_manipulator_control/force_torque_meas_input" to="force_sensor/force_torque_output" />
      <remap from="aerial_manipulator_control/uav/odometry_meas_input" to="odometry" />
      <remap from="aerial_manipulator_control/uav/pose_ref_output" to="pose_ref" />
      <remap from="joint_trajectory" to="arm_joint_trajectory" />

      <param name="rate" value="$(arg aerial_manipulator_control_rate)"/>
      <param name="parameters_file" value="$(arg aerial_manipulator_control_params_file)"/>
      <param name="simulation" value="$(arg use_sim_time)"/>
      <param name="maniupulator_name" value="wp_manipulator_3rx"/>
      <param name="joint_group_name" value="wp_manipulator_3rx_arm"/>
    </node>
    <node name="force_filter_node" pkg="impedance_control" type="force_filter_node">
      <param name="rate" value="1000"/>
      <param name="moving_average_sample_number" value="10"/>
      <param name="median_filter_size" value="21"/>
      <param name="pt1_filter_time_constant" value="0.05"/>
      <param name="invert_force_measurements" value="true"/>
      <remap from="force_sensor/force_torque_local_input" to="wp_manipulator/force_sensor/ft_sensor" />
      <remap from="force_sensor/transformation_matrix_input" to="aerial_manipulator_control/transformation/world_end_effector" />
    </node>

    <!-- Load parameters -->
    <!-- rosparam command="load" file="$(find plane_detection_ros)/config/detection/detection_parameters_wall.yaml" /-->

    <!-- Launch plane detection -->
    <!--node
            pkg="plane_detection_ros"
            type="plane_detection_node"
            name="plane_detection_node"
            output="screen">
            <remap from="/pointcloud" to="velodyne_points"/>
            <remap from="odometry" to="odometry"/>
    </node-->
  </group>

</launch>